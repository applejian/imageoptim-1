diff --git a/src/dmalloc.c b/src/dmalloc.c
index f84549e..e85d8d7 100644
--- a/src/dmalloc.c
+++ b/src/dmalloc.c
@@ -11,7 +11,7 @@ typedef struct bucket {
 #define NBUCK 5779
 static bucket *buckets[NBUCK];
 static int event_number;
-static FILE *verbose_out = 0;
+#define verbose_out 0

 size_t dmalloc_live_memory;

@@ -38,7 +38,7 @@ debug_malloc_id(size_t k, const char *file, int line)
   p = (void *)(((char *)p) + sizeof(bucket));
   /* memset(p, 99, b->size); */
   if (verbose_out)
-    fprintf(verbose_out, "%5d: %p +%-7d (%s:%d) ++  %ld\n", event_number,
+    fprintf(verbose_out, "%5d: %p +%-7ld (%s:%d) ++  %ld\n", event_number,
	    p, b->size, file, line, (long) dmalloc_live_memory);
   event_number++;
   return p;
@@ -171,7 +171,7 @@ dmalloc_report(void)
 {
   int i;
   bucket *b;
-  fprintf(stderr, "dmalloc: %d bytes allocated\n", dmalloc_live_memory);
+  fprintf(stderr, "dmalloc: %ld bytes allocated\n", dmalloc_live_memory);
   for (i = 0; i < NBUCK; i++)
     for (b = buckets[i]; b; b = b->next)
       fprintf(stderr, "dmalloc: %p +%-7ld (%s:%d)\n",
@@ -183,8 +183,4 @@ dmalloc_report(void)
 void
 dmalloc_verbose(const char *out_name)
 {
-  if (out_name)
-    verbose_out = fopen(out_name, "w");
-  else
-    verbose_out = stdout;
 }
diff --git a/src/gifsicle.c b/src/gifsicle.c
index b4277c9..3eb4506 100644
--- a/src/gifsicle.c
+++ b/src/gifsicle.c
@@ -33,7 +33,6 @@ Gt_Frameset *nested_frames = 0;

 Gif_Stream *input = 0;
 const char *input_name = 0;
-static int unoptimizing = 0;

 static int gif_read_flags = 0;
 static int nextfile = 0;
@@ -290,7 +289,6 @@ const Clp_Option options[] = {
     Clp_Negate },
   { "transparent", 't', 't', COLOR_TYPE, Clp_Negate },

-  { "unoptimize", 'U', UNOPTIMIZE_OPT, 0, Clp_Negate },
   { "use-colormap", 0, USE_COLORMAP_OPT, Clp_ValString, Clp_Negate },

   { "verbose", 'V', VERBOSE_OPT, 0, Clp_Negate },
@@ -697,17 +695,6 @@ input_stream(const char *name)
     add_frame(frames, -1, gfs, gfs->images[i]);
   def_frame = old_def_frame;

-  if (unoptimizing)
-    if (!Gif_FullUnoptimize(gfs, GIF_UNOPTIMIZE_SIMPLEST_DISPOSAL)) {
-      static int context = 0;
-      warning(1, "GIF too complex to unoptimize", name);
-      if (!context) {
-	warncontext(1, "(The reason was local color tables or complex transparency.");
-	warncontext(1, "Try running the GIF through 'gifsicle --colors=255' first.)");
-      }
-      context = 1;
-    }
-
   apply_color_transforms(input_transforms, gfs);
   gfs->refcount++;

@@ -770,69 +757,6 @@ set_new_fixed_colormap(const char *name)
     def_output_data.colormap_fixed = read_colormap_file(name, 0);
 }

-static void
-do_set_colormap(Gif_Stream *gfs, Gif_Colormap *gfcm)
-{
-  colormap_image_func image_func;
-  if (active_output_data.colormap_dither)
-    image_func = colormap_image_floyd_steinberg;
-  else
-    image_func = colormap_image_posterize;
-  colormap_stream(gfs, gfcm, image_func);
-}
-
-static void
-do_colormap_change(Gif_Stream *gfs)
-{
-  if (active_output_data.colormap_fixed)
-    do_set_colormap(gfs, active_output_data.colormap_fixed);
-
-  if (active_output_data.colormap_size > 0) {
-    int nhist;
-    Gif_Color *hist;
-    Gif_Colormap *(*adapt_func)(Gif_Color *, int, int);
-    Gif_Colormap *new_cm;
-
-    /* set up the histogram */
-    {
-      int i, any_locals = 0;
-      for (i = 0; i < gfs->nimages; i++)
-	if (gfs->images[i]->local)
-	  any_locals = 1;
-      hist = histogram(gfs, &nhist);
-      if (nhist <= active_output_data.colormap_size && !any_locals) {
-	warning(1, "trivial adaptive palette (only %d colors in source)", nhist);
-	return;
-      }
-    }
-
-    switch (active_output_data.colormap_algorithm) {
-
-     case COLORMAP_DIVERSITY:
-      adapt_func = &colormap_flat_diversity;
-      break;
-
-     case COLORMAP_BLEND_DIVERSITY:
-      adapt_func = &colormap_blend_diversity;
-      break;
-
-     case COLORMAP_MEDIAN_CUT:
-      adapt_func = &colormap_median_cut;
-      break;
-
-     default:
-      fatal_error("can't happen");
-
-    }
-
-    new_cm = (*adapt_func)(hist, nhist, active_output_data.colormap_size);
-    do_set_colormap(gfs, new_cm);
-
-    Gif_DeleteArray(hist);
-    Gif_DeleteColormap(new_cm);
-  }
-}
-

 /*****
  * output GIF images
@@ -883,8 +807,7 @@ merge_and_write_frames(const char *outfile, int f1, int f2)
   if (verbosing)
     verbose_open('[', outfile ? outfile : "#stdout#");

-  colormap_change = active_output_data.colormap_size > 0
-    || active_output_data.colormap_fixed;
+  colormap_change = 0;
   warn_local_colormaps = !colormap_change;

   compress_immediately = 1;
@@ -907,8 +830,6 @@ merge_and_write_frames(const char *outfile, int f1, int f2)
     else if (active_output_data.scaling == GT_SCALING_RESIZE_FIT)
       resize_stream(out, active_output_data.resize_width,
		    active_output_data.resize_height, 1);
-    if (colormap_change)
-      do_colormap_change(out);
     if (output_transforms)
       apply_color_transforms(output_transforms, out);
     if (active_output_data.optimizing > 0)
@@ -1284,16 +1205,6 @@ main(int argc, char *argv[])
   dmalloc_verbose("fudge");
 #endif

-  /* Yep, I'm an idiot.
-     GIF dimensions are unsigned 16-bit integers. I assume that these
-     numbers will fit in an 'int'. This assertion tests that assumption.
-     Really I should go through & change everything over, but it doesn't
-     seem worth my time. */
-  {
-    uint16_t m = 0xFFFFU;
-    int i = m;
-    assert(i > 0 && "configuration/lameness failure! bug the author!");
-  }

   while (1) {
     int opt = Clp_Next(clp);
@@ -1605,11 +1516,6 @@ main(int argc, char *argv[])
	def_output_data.optimizing = (clp->have_val ? clp->val.i : 1);
       break;

-     case UNOPTIMIZE_OPT:
-      UNCHECKED_MARK_CH(input, CH_UNOPTIMIZE);
-      unoptimizing = clp->negated ? 0 : 1;
-      break;
-
       /* WHOLE-GIF OPTIONS */

      case CAREFUL_OPT: {
diff --git a/src/quantize.c b/src/quantize.c
index 4d257be..5d96f36 100644
--- a/src/quantize.c
+++ b/src/quantize.c
@@ -101,7 +101,7 @@ histogram(Gif_Stream *gfs, int *nhist_store)
 {
   Gif_Histogram hist;
   Gif_Color *linear;
-  Gif_Color transparent_color;
+  Gif_Color transparent_color= {};
   unsigned long ntransparent = 0;
   unsigned long nbackground = 0;
   int x, y, i;
@@ -633,10 +633,10 @@ hash_color(int red, int green, int blue,
	new_cm_grayscale = 0;
   }

-  /* find the closest color in the new colormap */
+  if (new_cm)/* find the closest color in the new colormap */
   {
     Gif_Color *col = new_cm->col;
-    int ncol = new_cm->ncol, i, found;
+    int ncol = new_cm->ncol, i, found=0;
     uint32_t min_dist = 0xFFFFFFFFU;

     if (new_cm_grayscale) {
@@ -678,6 +678,7 @@ hash_color(int red, int green, int blue,
     trav->pixel = found;
     return found;
   }
+    return 0;
 }


@@ -863,7 +864,7 @@ try_assign_transparency(Gif_Image *gfi, Gif_Colormap *old_cm, uint8_t *new_data,
   int i, j;
   int transparent = gfi->transparent;
   int new_transparent = -1;
-  Gif_Color transp_value;
+  Gif_Color transp_value={};

   if (transparent < 0)
     return 0;
